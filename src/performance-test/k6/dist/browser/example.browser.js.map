{
  "version": 3,
  "sources": ["../../browser/example.browser.ts", "../../lib/utils.ts", "../../lib/thresholds.ts"],
  "sourcesContent": ["import { browser } from 'k6/experimental/browser';\nimport { check, sleep } from 'k6';\nimport { env } from '../lib/utils.js';\nimport { commonThresholds } from '../lib/thresholds.js';\nimport '../reports/summary.js';\n\nexport const options = {\n  thresholds: commonThresholds,\n  scenarios: {\n    ui: {\n      executor: 'constant-vus',\n      vus: 3,\n      duration: '1m',\n      options: { browser: { type: 'chromium' } }\n    }\n  },\n  tags: { suite: 'browser-ui' }\n};\n\nexport default async function () {\n  const page = browser.newPage();\n  try {\n    await page.goto(env.BASEURL, { waitUntil: 'networkidle' });\n    const title = await page.title();\n    check(title, { 'has title': t => typeof t === 'string' && t.length > 0 });\n    await page.waitForTimeout(500);\n    sleep(1);\n  } finally {\n    await page.close();\n  }\n}\n", "import { check, sleep } from 'k6';\nimport http, { RefinedResponse, ResponseType } from 'k6/http';\n\n// Reads from environment injected by GitHub Actions or your local shell.\n// In k0lmena you already keep .env at repo root; use a dotenv loader (npm scripts) if running locally.\nexport const env = {\n  BASEURL: __ENV.BASEURL || 'https://example.com',\n  API_BASEURL: __ENV.API_BASEURL || 'https://api.example.com',\n  AUTH_TOKEN: __ENV.AUTH_TOKEN || ''\n};\n\nexport function authHeaders(extra: Record<string, string> = {}) {\n  const base: Record<string, string> = { 'Content-Type': 'application/json' };\n  const headers = Object.assign({}, base, extra); // <- sin spread\n  if (env.AUTH_TOKEN) headers['Authorization'] = `Bearer ${env.AUTH_TOKEN}`;\n  return headers;\n}\n\nexport function ok(res: RefinedResponse<ResponseType | undefined>, name='status 2xx') {\n  return check(res, { [name]: r => !!r && r.status !== undefined && r.status >= 200 && r.status < 300 });\n}\n\nexport function pause(ms=500) { sleep(ms/1000); }\n\nexport function rnd(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n", "// Common defaults (widely used as a starting point)\nexport const commonThresholds = {\n  http_req_failed: ['rate<0.01'],\n  http_req_duration: ['p(95)<500', 'p(99)<1200'],\n  checks: ['rate>0.99']\n};\n"],
  "mappings": ";AAAA,SAAS,eAAe;AACxB,SAAS,SAAAA,QAAO,SAAAC,cAAa;;;ACD7B,SAAS,OAAO,aAAa;AAKtB,IAAM,MAAM;AAAA,EACjB,SAAS,MAAM,WAAW;AAAA,EAC1B,aAAa,MAAM,eAAe;AAAA,EAClC,YAAY,MAAM,cAAc;AAClC;;;ACRO,IAAM,mBAAmB;AAAA,EAC9B,iBAAiB,CAAC,WAAW;AAAA,EAC7B,mBAAmB,CAAC,aAAa,YAAY;AAAA,EAC7C,QAAQ,CAAC,WAAW;AACtB;;;AFCO,IAAM,UAAU;AAAA,EACrB,YAAY;AAAA,EACZ,WAAW;AAAA,IACT,IAAI;AAAA,MACF,UAAU;AAAA,MACV,KAAK;AAAA,MACL,UAAU;AAAA,MACV,SAAS,EAAE,SAAS,EAAE,MAAM,WAAW,EAAE;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,MAAM,EAAE,OAAO,aAAa;AAC9B;AAEA,eAAO,0BAA0B;AAC/B,QAAM,OAAO,QAAQ,QAAQ;AAC7B,MAAI;AACF,UAAM,KAAK,KAAK,IAAI,SAAS,EAAE,WAAW,cAAc,CAAC;AACzD,UAAM,QAAQ,MAAM,KAAK,MAAM;AAC/B,IAAAC,OAAM,OAAO,EAAE,aAAa,OAAK,OAAO,MAAM,YAAY,EAAE,SAAS,EAAE,CAAC;AACxE,UAAM,KAAK,eAAe,GAAG;AAC7B,IAAAC,OAAM,CAAC;AAAA,EACT,UAAE;AACA,UAAM,KAAK,MAAM;AAAA,EACnB;AACF;",
  "names": ["check", "sleep", "check", "sleep"]
}
