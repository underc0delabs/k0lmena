{
  "version": 3,
  "sources": ["../../http/stress.ts", "../../lib/utils.ts", "../../lib/thresholds.ts"],
  "sourcesContent": ["import http from 'k6/http';\nimport { sleep, check } from 'k6';\nimport { env, authHeaders } from '../lib/utils.js';\nimport { commonThresholds } from '../lib/thresholds.js';\nimport '../reports/summary.js';\n\nexport const options = {\n  thresholds: commonThresholds,\n  scenarios: {\n    ramping_arrival: {\n      executor: 'ramping-arrival-rate',\n      startRate: 1,\n      timeUnit: '1s',\n      preAllocatedVUs: 20,\n      maxVUs: 200,\n      stages: [\n        { target: 10, duration: '2m' },\n        { target: 30, duration: '3m' },\n        { target: 0,  duration: '1m' }\n      ]\n    }\n  },\n  tags: { suite: 'http-stress' }\n};\n\nexport default function () {\n  const res = http.get(env.BASEURL, { headers: authHeaders() });\n  check(res, { 'status is 200': r => r.status === 200 });\n  sleep(1);\n}\n", "import { check, sleep } from 'k6';\nimport http, { RefinedResponse, ResponseType } from 'k6/http';\n\n// Reads from environment injected by GitHub Actions or your local shell.\n// In k0lmena you already keep .env at repo root; use a dotenv loader (npm scripts) if running locally.\nexport const env = {\n  BASEURL: __ENV.BASEURL || 'https://example.com',\n  API_BASEURL: __ENV.API_BASEURL || 'https://api.example.com',\n  AUTH_TOKEN: __ENV.AUTH_TOKEN || ''\n};\n\nexport function authHeaders(extra: Record<string, string> = {}) {\n  const base: Record<string, string> = { 'Content-Type': 'application/json' };\n  const headers = Object.assign({}, base, extra); // <- sin spread\n  if (env.AUTH_TOKEN) headers['Authorization'] = `Bearer ${env.AUTH_TOKEN}`;\n  return headers;\n}\n\nexport function ok(res: RefinedResponse<ResponseType | undefined>, name='status 2xx') {\n  return check(res, { [name]: r => !!r && r.status !== undefined && r.status >= 200 && r.status < 300 });\n}\n\nexport function pause(ms=500) { sleep(ms/1000); }\n\nexport function rnd(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n", "// Common defaults (widely used as a starting point)\nexport const commonThresholds = {\n  http_req_failed: ['rate<0.01'],\n  http_req_duration: ['p(95)<500', 'p(99)<1200'],\n  checks: ['rate>0.99']\n};\n"],
  "mappings": ";AAAA,OAAO,UAAU;AACjB,SAAS,SAAAA,QAAO,SAAAC,cAAa;;;ACD7B,SAAS,OAAO,aAAa;AAKtB,IAAM,MAAM;AAAA,EACjB,SAAS,MAAM,WAAW;AAAA,EAC1B,aAAa,MAAM,eAAe;AAAA,EAClC,YAAY,MAAM,cAAc;AAClC;AAEO,SAAS,YAAY,QAAgC,CAAC,GAAG;AAC9D,QAAM,OAA+B,EAAE,gBAAgB,mBAAmB;AAC1E,QAAM,UAAU,OAAO,OAAO,CAAC,GAAG,MAAM,KAAK;AAC7C,MAAI,IAAI,WAAY,SAAQ,eAAe,IAAI,UAAU,IAAI,UAAU;AACvE,SAAO;AACT;;;ACfO,IAAM,mBAAmB;AAAA,EAC9B,iBAAiB,CAAC,WAAW;AAAA,EAC7B,mBAAmB,CAAC,aAAa,YAAY;AAAA,EAC7C,QAAQ,CAAC,WAAW;AACtB;;;AFCO,IAAM,UAAU;AAAA,EACrB,YAAY;AAAA,EACZ,WAAW;AAAA,IACT,iBAAiB;AAAA,MACf,UAAU;AAAA,MACV,WAAW;AAAA,MACX,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,EAAE,QAAQ,IAAI,UAAU,KAAK;AAAA,QAC7B,EAAE,QAAQ,IAAI,UAAU,KAAK;AAAA,QAC7B,EAAE,QAAQ,GAAI,UAAU,KAAK;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,EAAE,OAAO,cAAc;AAC/B;AAEe,SAAR,iBAAoB;AACzB,QAAM,MAAM,KAAK,IAAI,IAAI,SAAS,EAAE,SAAS,YAAY,EAAE,CAAC;AAC5D,EAAAC,OAAM,KAAK,EAAE,iBAAiB,OAAK,EAAE,WAAW,IAAI,CAAC;AACrD,EAAAC,OAAM,CAAC;AACT;",
  "names": ["sleep", "check", "check", "sleep"]
}
